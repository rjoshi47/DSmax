Filter: https://practice.geeksforgeeks.org/tag-page.php?tag=Amazon&isCmp=1&level=1&problemType=0&sort=asc&sort_by=sub

3. https://practice.geeksforgeeks.org/problems/combination-sum/0
4. Distribute given sum among n beggers. (P&C)
5. https://practice.geeksforgeeks.org/problems/champagne-overflow/0
6. https://practice.geeksforgeeks.org/problems/next-permutation/0
8. https://practice.geeksforgeeks.org/problems/maximum-rectangular-area-in-a-histogram/0
9. https://practice.geeksforgeeks.org/problems/form-a-palindrome/0
'''
Created on 17-Jun-2018

@author: rjoshi
1) Create an empty stack.

2) Start from first bar, and do following for every bar ‘hist[i]’ where ‘i’ varies from 0 to n-1.
……a) If stack is empty or hist[i] is higher than the bar at top of stack, then push ‘i’ to stack.
……b) If this bar is smaller than the top of stack, then keep removing the top of stack while top of the stack is greater. Let the removed bar be hist[tp]. Calculate area of rectangle with hist[tp] as smallest bar. For hist[tp], the ‘left index’ is previous (previous to tp) item in stack and ‘right index’ is ‘i’ (current index).

3) If the stack is not empty, then one by one remove all bars from stack and do step 2.b for every removed bar.

int getMaxArea(int hist[], int n)
{
    stack<int> s;

    int max_area = 0; // Initalize max area
    int tp;  // To store top of stack
    int area_with_top; // To store area with top bar
                       // as the smallest bar
    int i = 0;
    while (i < n)
    {
        if (s.empty() || hist[s.top()] <= hist[i])
            s.push(i++);

        else
        {
            tp = s.top();  // store the top index
            s.pop();  // pop the top

            area_with_top = hist[tp] * (s.empty() ? i : 
                                   i - s.top() - 1);
            if (max_area < area_with_top)
                max_area = area_with_top;
        }
    }
    while (s.empty() == false)
    {
        tp = s.top();
        s.pop();
        area_with_top = hist[tp] * (s.empty() ? i : 
                                i - s.top() - 1);

        if (max_area < area_with_top)
            max_area = area_with_top;
    }

    return max_area;
}
'''
'''
Created on May 8, 2018

@author: devuser

'''    

# nums = [(3,2), (1,4), (2,3)]
# nums.sort(key=lambda x:x[0])
# print(nums)

res = []
for _ in range(int(input())):
    n = int(input())
    nums = list(map(int, input().strip().split(" ")))
    
    tStack = []
    maxAreaSoFar = 0
    maxAreaTillNow = 0
    k = 0
    
    while k < n or len(tStack) != 0:
            if k < n and len(tStack) == 0 or tStack[len(tStack)-1] <= nums[k]:
                tStack.append(k)
                k += 1
            else:
                topi = tStack.pop(len(tStack)-1)
                maxAreaTillNow = int(nums[topi])
                if len(tStack) == 0:
                    maxAreaTillNow = maxAreaTillNow*k 
                else: 
                    maxAreaTillNow = maxAreaTillNow*(tStack[len(tStack)-1] -1)
    
    
        
for xx in res:
    print(xx)
    
    
    
for xx in res:
    print(xx)
