Filter: https://practice.geeksforgeeks.org/tag-page.php?tag=Amazon&isCmp=1&level=1&problemType=0&sort=asc&sort_by=sub

3. https://practice.geeksforgeeks.org/problems/combination-sum/0 [doc it]
4. Distribute given sum among n beggers. (P&C)
5. https://practice.geeksforgeeks.org/problems/champagne-overflow/0
6. https://practice.geeksforgeeks.org/problems/next-permutation/0
9. https://practice.geeksforgeeks.org/problems/form-a-palindrome/0 
10. https://practice.geeksforgeeks.org/problems/egg-dropping-puzzle/0
'''
Created on 28-Jan-2020
https://practice.geeksforgeeks.org/problems/word-break/0

dp[i][j] = if word[i..j] can be split and each word is found in dictionary
        
                1         if word[i..j] is in dictionary
dp[i][j] = {    1         if word[i..k] and word[k...j] both are in dictionary
                0         Otherwise
@author: rjoshi
'''
def break_word(dict_main, word):
    n = len(word)
    dp = [[(0, 0) for i in range(n)] for j in range(n)]
    
    for k in range(n):
        for i in range(n-k):
            #print(word[i: i+k+1], end = " ")
            if word[i: i+k+1] in dict_main:
                dp[i][i+k] = (1, -1)
            else:
                for p in range(i, i+k):
                    if dp[i][p][0] + dp[p+1][i+k][0] == 2:
                        dp[i][i+k] = (1, p)
                        break
    
    for i in range(n):
        print(dp[i])
    return dp[0][n-1]

res = []
for _ in range(int(input())):
    n = int(input())
    dict_words = input().split(" ")
    word = input()
    
    dict_main = {}
    for i in range(len(dict_words)):
        if len(dict_words[i]) > 0:
            dict_main[dict_words[i]] = i
    
    res.append(break_word(dict_main, word))

for xx in res:
    print(xx)


'''
Created on 05-Feb-2020

@author: rjoshi
'''
class Board:
    def __init__(self, r, c):
        self.r = r
        self.c = c
    
    def in_bound(self, idx):
        (x, y) = idx
        return 0 <= x < self.r and 0 <= y < self.c
    
    def next_nodes(self, idx):
        (x, y) = idx
        results = [(x-2, y-1), (x-2, y+1), (x-1, y+2), (x+1, y+2), (x+2, y+1), (x+2, y-1), (x+1, y-2), (x-1, y-2)]
        return list(filter(self.in_bound, results))
    
def lets_move(Board, start, k):
    k_queue = []
    move_so_far = {}
    prop_so_far = {}
    
    k_queue.append(start)
    move_so_far[start] = 0
    prop_so_far[(start, 0)] = 1
    
    while len(k_queue) != 0:
        curr = k_queue.pop()
        
        if move_so_far[curr] < k:
            for next_pos in Board.next_nodes(curr):
                new_k = 1 + move_so_far[curr]
                move_so_far[next_pos] = new_k
                if (next_pos, new_k) not in prop_so_far:
                    prop_so_far[(next_pos, new_k)] = prop_so_far[(curr, new_k-1)]/8
                else:
                    prop_so_far[(next_pos, new_k)] += prop_so_far[(curr, new_k-1)]/8
                k_queue.append(next_pos)
    r = 0
    for ((pos, n_k), v) in prop_so_far.items():
        if n_k == k:
            r += v
    print(r)
    #print(prop_so_far)
    #print(iam_in)
            

lets_move(Board(5,5), (0,0), 3)
